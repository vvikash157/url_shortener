// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/vvika/OneDrive/Desktop/LowLevelDesign/url_shortner/repository/url_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlRepository is a mock of UrlRepository interface.
type MockUrlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepositoryMockRecorder
}

// MockUrlRepositoryMockRecorder is the mock recorder for MockUrlRepository.
type MockUrlRepositoryMockRecorder struct {
	mock *MockUrlRepository
}

// NewMockUrlRepository creates a new mock instance.
func NewMockUrlRepository(ctrl *gomock.Controller) *MockUrlRepository {
	mock := &MockUrlRepository{ctrl: ctrl}
	mock.recorder = &MockUrlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepository) EXPECT() *MockUrlRepositoryMockRecorder {
	return m.recorder
}

// GetCodeByLongUrl mocks base method.
func (m *MockUrlRepository) GetCodeByLongUrl(longUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeByLongUrl", longUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeByLongUrl indicates an expected call of GetCodeByLongUrl.
func (mr *MockUrlRepositoryMockRecorder) GetCodeByLongUrl(longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeByLongUrl", reflect.TypeOf((*MockUrlRepository)(nil).GetCodeByLongUrl), longUrl)
}

// GetLongUrlByCode mocks base method.
func (m *MockUrlRepository) GetLongUrlByCode(shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongUrlByCode", shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongUrlByCode indicates an expected call of GetLongUrlByCode.
func (mr *MockUrlRepositoryMockRecorder) GetLongUrlByCode(shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongUrlByCode", reflect.TypeOf((*MockUrlRepository)(nil).GetLongUrlByCode), shortCode)
}

// InsertUrl mocks base method.
func (m *MockUrlRepository) InsertUrl(longUrl, shortCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUrl", longUrl, shortCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUrl indicates an expected call of InsertUrl.
func (mr *MockUrlRepositoryMockRecorder) InsertUrl(longUrl, shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUrl", reflect.TypeOf((*MockUrlRepository)(nil).InsertUrl), longUrl, shortCode)
}
